@model Lot
@{
    string returnUrl = Request.Url.PathAndQuery;
    var followLiveActivated = (bool?)ViewData["FollowLive"];
}
<script>
    var followLiveActivated = @(followLiveActivated.ToString().ToLower());

    $(document).ready(function () {
        //global reasoncodes
        contextMessageDictionary["Failure"] = "@Html.GlobalResource("Failure").ToJavascriptSafeString()";
        contextMessageDictionary["ListingNotExist"] = "@Html.GlobalResource("ListingNotExist").ToJavascriptSafeString()";
        contextMessageDictionary["ListingNotActive"] = "@Html.GlobalResource("ListingNotActive").ToJavascriptSafeString()";
        contextMessageDictionary["ListerPerformingAction"] = "@Html.GlobalResource("ListerPerformingAction").ToJavascriptSafeString()";
        contextMessageDictionary["Success"] = "@Html.GlobalResource("Success").ToJavascriptSafeString()";
        contextMessageDictionary["BuyNowNotAvailable"] = "@Html.GlobalResource("BuyNowNotAvailable").ToJavascriptSafeString()";
        contextMessageDictionary["ProxyBeatingNewBid"] = "@Html.GlobalResource("ProxyBeatingNewBid").ToJavascriptSafeString()";
        contextMessageDictionary["CantLowerProxyBid"] = "@Html.GlobalResource("CantLowerProxyBid").ToJavascriptSafeString()";
        contextMessageDictionary["BidAmountTooLow"] = "@Html.GlobalResource("BidAmountTooLow").ToJavascriptSafeString()";
        contextMessageDictionary["ListingChangedDuringProcessing"] = "@Html.GlobalResource("ListingChangedDuringProcessing").ToJavascriptSafeString()";
        contextMessageDictionary["QuantityTooHigh"] = "@Html.GlobalResource("QuantityTooHigh").ToJavascriptSafeString()";
        contextMessageDictionary["LicenceInvalid"] = "@Html.ValidationResource("LicenceInvalid").ToJavascriptSafeString()";

        var ownerAllowsInstantCheckout = @Model.Listing.OwnerAllowsInstantCheckout().ToString().ToLower();

        @*@if (User.Identity.IsAuthenticated && SiteClient.BoolSetting(SiteProperties.AsyncActionProcessing))
        {
            <text>
        $(document).on("SignalR_Started", function () {
            RegisterUserName("@Html.FBOUserName().ToJavascriptSafeString()");
        });
            </text>
        }*@

        $(document).on("SignalR_UpdateListingAction", function (event, data) {
            //if we are the seller, clear the status which is potentially invalidated
            if ("@Model.Listing.OwnerUserName" == "@Html.FBOUserName()") {
                $(".ContextualStatus").each(function () {
                    if ($(this).is(":visible")) {
                        $(this).fadeTo(2000, 0, function () {
                            $(this).slideUp(500);
                        });
                    }
                });
            }
        });

        //show the latest Context message for this acting user
        $(document).on("SignalR_ListingActionResponse", function (event, data) {
            //console.log("SignalR_ListingActionResponse DATA:", data);
            if ($.inArray(data.Action_ListingID, interestingListings) >= 0) {
                var message = "";
                var systemMessage = "";
                var cssClass = "";
                if (data.Context_IsFilled) {
                    //Context is not null, prepare Context message
                    if (!data.Context_Disregard) {
                        if (!contextMessageDictionary[data.Context_Status]) {
                            console.log("Dev Error: contextMessageDictionary['" + data.Context_Status + "'] is not defined.");
                            message = "Unknown Status";
                        } else {
                            message = contextMessageDictionary[data.Context_Status].format(data.Context_Parameters);
                        }
                        switch (data.Context_Disposition) {
                            case 0:
                                cssClass = "alert alert-success";
                                break;
                            case 1:
                                cssClass = "alert alert-warning";
                                break;
                            case 2:
                                cssClass = "alert alert-danger";
                                break;
                        }
                        //if Context message wasn't already visible, show it
                        $(".ContextualStatus").each(function () {
                            $(this).html("<div class='" + cssClass + "'>" + message + "</div>");
                            if (!$(this).is(":visible")) {
                                $(this).fadeTo(1000, 1, function () {
                                    $(this).slideDown(500);
                                });
                            }
                        });
                    }
                    if (data.Accepted) {
                        //prepare success system message
                        systemMessage = "<div class='alert alert-success'><a class='close' onclick='$(this).parents(\"div\").first().slideUp();'>×</a>" + contextMessageDictionary["ActionSuccess"] + "</div>";
                        if (!$(".awe-rt-ListingActionMessage").is(":visible") || $(".awe-rt-ListingActionMessage").html() == "") {
                            $(".awe-rt-ListingActionMessage").hide();
                            $(".awe-rt-ListingActionMessage").html(systemMessage);
                            $(".awe-rt-ListingActionMessage").slideDown();
                        } else {
                            $(".awe-rt-ListingActionMessage").fadeOut(200, function () {
                                $(this).html(systemMessage);
                                $(this).fadeIn(200);
                            });
                        }
                        //render checkout button if a lineitem was returned
                        if (ownerAllowsInstantCheckout && data.LineItemID) {
                            var checkoutUrl = '@SiteClient.TextSetting(SiteProperties.SecureURL)/Account/Checkout?lineitemid=' + data.LineItemID;
                            checkoutUrl += '&returnUrl=@(Server.UrlEncode(returnUrl))';
                            var checkoutHtml =
                                         '<div class="detail__checkout">'
                                + '<a href="' + checkoutUrl + '" class="btn__detail__checkout detail__option-menu__link">'
                                + '<span class="detail__option-menu__icon"><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">'
                                + '<path d="M0 0h24v24H0z" fill="none" />'
                                + '<path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z" />'
                                + '</svg></span>'
                                + '<span class="detail__option-menu__label">' + '@Html.GlobalResourceString("Checkout").ToJavascriptSafeString()' + '</span>'
                                + '</a>'
                                + '</div>';
                            if ($(".detail__context-menu").find(".btn__detail__checkout").length == 0) {
                                $(".detail__context-menu").prepend(checkoutHtml).show();
                            } else {
                                jslog("skipped rendering checkout button because one already exists.");
                            }
                        }
                    } else {
                        //ReasonString is populated, prepare a Negative System message
                        if (contextMessageDictionary[data.ReasonString]) {
                            systemMessage = "<div class='alert alert-danger'><a class='close' onclick='$(this).parents(\"div\").first().slideUp();'>×</a>" + contextMessageDictionary[data.ReasonString] + "</div>";
                        } else {
                            systemMessage = "<div class='alert alert-danger'><a class='close' onclick='$(this).parents(\"div\").first().slideUp();'>×</a>" + data.ReasonString + "</div>";
                        }
                        if (!$(".awe-rt-ListingActionMessage").is(":visible") || $(".awe-rt-ListingActionMessage").html() == "") {
                            $(".awe-rt-ListingActionMessage").hide();
                            $(".awe-rt-ListingActionMessage").html(systemMessage);
                            $(".awe-rt-ListingActionMessage").slideDown();
                        } else {
                            $(".awe-rt-ListingActionMessage").fadeOut(200, function () {
                                $(this).html(systemMessage);
                                $(this).fadeIn(200);
                            });
                        }
                    }
                } else {
                    //Context is null, but ReasonString is populated, prepare a Negative System message
                    if (contextMessageDictionary[data.ReasonString]) {
                        systemMessage = "<div class='alert alert-danger'><a class='close' onclick='$(this).parents(\"div\").first().slideUp();'>×</a>" + contextMessageDictionary[data.ReasonString] + "</div>";
                    } else {
                        systemMessage = "<div class='alert alert-danger'><a class='close' onclick='$(this).parents(\"div\").first().slideUp();'>×</a>" + data.ReasonString + "</div>";
                    }
                    if (!$(".awe-rt-ListingActionMessage").is(":visible") || $(".awe-rt-ListingActionMessage").html() == "") {
                        $(".awe-rt-ListingActionMessage").hide();
                        $(".awe-rt-ListingActionMessage").html(systemMessage);
                        $(".awe-rt-ListingActionMessage").slideDown();
                    } else {
                        $(".awe-rt-ListingActionMessage").fadeOut(200, function () {
                            $(this).html(systemMessage);
                            $(this).fadeIn(200);
                        });
                    }
                }
            }
        });

        //render checkout button if the listing ends successfully and the winner is viewing
        $(document).on("SignalR_UpdateListingStatus", function (event, data) {
            var followLiveDelayMS = 3000; //default 3000 = 3 seconds

            if (ownerAllowsInstantCheckout && data.Status == "@ListingStatuses.Successful" && data.LineItemID && data.LineItemPayerUN == "@Html.FBOUserName()") {
                var checkoutUrl = '@SiteClient.TextSetting(SiteProperties.SecureURL)/Account/Checkout?lineitemid=' + data.LineItemID;
                checkoutUrl += '&returnUrl=@(Server.UrlEncode(returnUrl))';
                var checkoutHtml =
                            '<div class="detail__checkout">'
                                + '<a href="' + checkoutUrl + '" class="btn__detail__checkout detail__option-menu__link">'
                                + '<span class="detail__option-menu__icon"><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">'
                                + '<path d="M0 0h24v24H0z" fill="none" />'
                                + '<path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z" />'
                                + '</svg></span>'
                                + '<span class="detail__option-menu__label">' + '@Html.GlobalResourceString("Checkout").ToJavascriptSafeString()' + '</span>'
                                + '</a>'
                                + '</div>';
                $(".detail__context-menu").prepend(checkoutHtml).show();
            }
            @if (Model.Event.FollowLiveEnabled && followLiveActivated.HasValue && followLiveActivated.Value == true)
            {
                <text>
            if (data.Status == "@ListingStatuses.Ending") {
                console.log("preparing to redirect to next lot ending...");
                setTimeout(function () {
                    var thisEventId = '@Model.Event.ID';
                    console.log("Finding next lot...");
                    $.post('RealTime/GetNextLotClosing', { eventId: thisEventId }).done(function (data) {
                        if (data.LotId) {
                            var baseTargetUrl = '@Html.GetActionUrl(MVC.LotDetailsAction, new { id = "[NEXTLOTID]" }).ToJavascriptSafeString()';
                            if (baseTargetUrl.indexOf("?") < 0) {
                                baseTargetUrl += "?FollowLive=true"
                            } else {
                                baseTargetUrl += "&FollowLive=true"
                            }
                            var targetUrl = baseTargetUrl.replace("[NEXTLOTID]", data.LotId);
                            console.log("Redirecting to next lot...", targetUrl);
                            document.location = targetUrl;
                        } else {
                            var targetUrl = '@Html.GetActionUrl(MVC.DetailsAction, new { id = Model.Event.ID }).ToJavascriptSafeString()';
                            console.log("Next lot NOT FOUND; redirecting to event detail page...", targetUrl);
                            document.location = targetUrl;
                        }
                    });
                }, followLiveDelayMS);
            }
                </text>
            }
        });

        $(".GoToPrevLot").on("click", function () {
            var thisLotOrder = @Model.LotOrder;
            var lastLotOrder = @(Model.Event.LotCount-1);
            if (thisLotOrder > 0) {
                $(".GoToPrevLot").prop("disabled", true);
                $.post("@Html.GetActionUrl(MVC.GetLotIdByLotOrderAction, MVC.RealTimeController)",
                    { eventId: @Model.Event.ID, lotOrder: (thisLotOrder - 1) })
                    .done(function (data) {
                        if (data.LotId) {
                            window.location.href = "@Html.GetActionUrl(MVC.LotDetailsAction, MVC.EventController, new { @id = "" } )" + "/" + data.LotId;
                        }
                    });
            }
        });
        $(".GoToNextLot").on("click", function () {
            var thisLotOrder = @Model.LotOrder;
            var lastLotOrder = @(Model.Event.LotCount-1);
            if (thisLotOrder < lastLotOrder) {
                $(".GoToNextLot").prop("disabled", true);
                $.post("@Html.GetActionUrl(MVC.GetLotIdByLotOrderAction, MVC.RealTimeController)",
                    { eventId: @Model.Event.ID, lotOrder: (thisLotOrder + 1) })
                    .done(function (data) {
                        console.log("next lot result: ", data);
                        if (data.LotId) {
                            window.location.href = "@Html.GetActionUrl(MVC.LotDetailsAction, MVC.EventController, new { @id = "" } )" + "/" + data.LotId;
                        }
                    });
            }
        });

    });

    @*//this will execute if the browser supports the Page Visibility API, was switched to a background tab for some amount of time, and has just become the active tab again
    function StalePageHandler(timeSinceLastVisibleMS) {

        var listingId = @Model.Listing.ID;

        //first, see how much time is actually left before this lot ends...
        var promise = Proxy.invokeAsync("GetTimeRemaining", {
            listingId: listingId
        }, function (data) {
            //got result
            if (data.error == "") {
                if (data.secondsRemaining < 0) {
                    //the EndDTTM of this lot is in the past, so a refresh may be needed...
                    if ($(".awe-rt-BuyBox:visible").length > 0) {
                        //the bid/purchse form is still visible, so this must be a stale page that missed or failed to process the "Listing Ended" SignalR message...
                        if (followLiveActivated) {
                            //go to next lot...
                            $.post('RealTime/GetNextLotClosing', { eventId: @Model.Event.ID }).done(function (data) {
                                if (data.LotId) {
                                    var baseTargetUrl = '@Html.GetActionUrl(MVC.LotDetailsAction, new { id = "[NEXTLOTID]" }).ToJavascriptSafeString()';
                                    if (baseTargetUrl.indexOf("?") < 0) {
                                        baseTargetUrl += "?FollowLive=true"
                                    } else {
                                        baseTargetUrl += "&FollowLive=true"
                                    }
                                    var targetUrl = baseTargetUrl.replace("[NEXTLOTID]", data.LotId);
                                    console.log("Redirecting to next lot...", targetUrl);
                                    document.location = targetUrl;
                                } else {
                                    var targetUrl = '@Html.GetActionUrl(MVC.DetailsAction, new { id = Model.Event.ID }).ToJavascriptSafeString()';
                                    console.log("Next lot NOT FOUND; redirecting to event detail page...", targetUrl);
                                    document.location = targetUrl;
                                }
                            });
                        } else {
                            //reload this page
                            location.reload(true);
                        }
                    }
                }
            } else {
                jslog("error (1a) retrieving EndDTTM for #" + listingId + ": " + data.error);
            }
        }, function (error) {
            jslog("error (2a) retrieving EndDTTM for #" + listingId);
        });
        promise.fail(function (jqXHR, textStatus) {
            jslog("error (3a) retrieving EndDTTM for #" + listingId);
        });
    }*@

</script>
@{
    bool makeOfferAvailable = false;
}
@if (Model.Listing.Properties.Any(lp => lp.Field.Name == Fields.MakeOfferAvailable && bool.TryParse(lp.Value, out makeOfferAvailable) && makeOfferAvailable))
{
    @Html.Partial("MakeOfferForm", Model.Listing)
}
<div class="row">
    <div class="col-xs-12">
        @Html.Partial("EventSummary", ViewData[MVC.EventDetails])
    </div>
</div>
<div class="row">
    <div class="col-xs-12 col-md-7 detail__title__wrapper">
        <span class="detail__status-label awe-rt-ColoredStatus pull-right">
            @Html.Partial("Listing_StatusLabel", Model.Listing)
        </span>
        <h3 class="detail__title">@Model.Listing.Title <img src="Content/Images/exclamation.png" class="awe-hidden awe-refresh-alert" onclick="location.reload(true);" title="@Html.GlobalResource("RefreshAlert")" /></h3>
        @if (Model.Listing.Subtitle.Length > 0)
        {
            <h4 class="detail__subtitle">@Model.Listing.Subtitle</h4>
        }
        @Html.Partial("OptionsMenu")
    </div>
    <div class="col-xs-12 col-md-5">
        <div class="panel panel-default">
            <div class="detail__next-prev-lot">
                @if (Model.LotOrder > 0)
            {
                    <button class="btn btn-sm btn-default GoToPrevLot">
                        <span class="glyphicon glyphicon-chevron-left"></span>
                        @Html.GlobalResource("prev")
                    </button>
                }
                else
                {
                    <button class="btn btn-sm btn-default" disabled>
                        <span class="glyphicon glyphicon-chevron-left"></span>
                        @Html.GlobalResource("prev")
                    </button>
                }
                &nbsp;
                @*@Html.GlobalResource(Model.Listing.Type.Name)*@
                <span>@Html.GlobalResource("LotNumX", Model.LotNumber)</span>
                @if (Model.LotOrder < Model.Event.LotCount - 1)
            {
                    <button class="btn btn-sm btn-default GoToNextLot">
                        @Html.GlobalResource("next")
                        <span class="glyphicon glyphicon-chevron-right"></span>
                    </button>
                }
                else
                {
                    <button class="btn btn-sm btn-default" disabled>
                        @Html.GlobalResource("next")
                        <span class="glyphicon glyphicon-chevron-right"></span>
                    </button>
                }
            </div>
            <div class="detail__context-wrapper ContextualStatus" id="ContextualStatus1">
                @Html.Partial("ContextualStatus", Model.Listing)
            </div>
            @Html.Partial("ContextMenu", Model.Listing)

            @{
                IEnumerable<Media> medias = Model.Listing.Media.Where(m => m.Variations.ContainsKey(SiteClient.ThumbnailType));
                Media image = Model.Listing.Media.Where(m => m.Variations.ContainsKey("FullSize")).FirstOrDefault();
            }
            @{IEnumerable<Media> nonImageMedia = Model.Listing.Media.Where(m => !m.Variations.ContainsKey(SiteClient.ThumbnailType));}

            @if (image != null)
            {
                @Html.Partial(image.Type + "_FullSize", image)
                if (medias.Count() <= 1)
                {
                    @Html.Partial(image.Type + "_FullSizeLightbox", image)
                }
            }
            else
            {
                @Html.Partial("NoPhoto")
            }

            @if ((medias.Count() > 1) || (nonImageMedia.Where(m => m.Type.Contains("YouTube")).Count() > 0))
            {
                <div id="ListingImageThumbsCarousel" class="everslider">
                    <ul class="es-slides">
                        @if (nonImageMedia.Count() > 0)
                        {
                            foreach (Media media in nonImageMedia.Where(m => m.Type.Contains("YouTube")))
                            {

                                <li style="width: 100px; height: 100px; margin-right: 10px;">
                                    <a href="#YouTube-modal" data-toggle="modal" data-target="#YouTube-modal" title="@Html.GlobalResource("WatchVideo"): @Model.Listing.Title">
                                        <img src="~/Content/Images/YouTube-icon-full_color.png" />
                                    </a>
                                </li>
                            }
                        }
                        @foreach (Media media in medias)
                        {
                            @Html.Partial(media.Type + "_" + SiteClient.ThumbnailType + "_for_ListingDetail", media)
                        }
                    </ul>
                </div>
            }

            @if (nonImageMedia.Count() > 0)
            {
                if (nonImageMedia.Where(m => !m.Type.Contains("YouTube")).Count() > 0)
                {
                    <div class="detail__documents">
                        @Html.GlobalResource("AdditionalDocuments")
                    </div>
                }
                foreach (Media media in nonImageMedia.Where(m => !m.Type.Contains("YouTube")))
                {
                    @Html.Partial(media.Type + "_" + media.DefaultVariationName, media)<br />
                }
            }
            @Html.GetSiteContent("Literal_SocialNetworking")
        </div>
    </div>
    <div class="col-xs-12 col-md-7">
        <div class="awe-rt-ListingActionMessage"></div>
        @if (Model.Listing.Status == ListingStatuses.Preview)
        {
            <div class="awe-rt-hideable awe-rt-ShowStatusPreview" >
                @Html.Partial(Model.Listing.Type.Name + "PreviewBox", Model.Listing)
            </div>
        }
        @if (Model.Listing.Status == ListingStatuses.Active || Model.Listing.Status == ListingStatuses.Preview || Model.Listing.Status == ListingStatuses.Pending)
        {
            @Html.Partial("Action_BuyBox", Model.Listing)
        }
        @Html.Partial(Model.Listing.Type.Name + "Details", Model.Listing)
    </div>
</div>
@{
            List<CustomProperty> properties = Model.Listing.Properties.Where(p => p.Field.Group.Equals("Item") &&
                !string.IsNullOrEmpty(p.Value)).OrderBy(cp => cp.Field.DisplayOrder).ToList();
}
<div class="row">
    <div class="col-xs-12 col-md-5">
        <div class="panel panel-default detail__data-panel">
            <div class="panel-heading">
                @Html.GlobalResource("Details")
            </div>

            <div class="row">
                @if (properties.Count > 0)
                {
                    <div class="col-xs-12">
                        <ul class="detail__custom-fields list-unstyled">
                            @foreach (CustomProperty property in properties)
                            {
                                <li>
                                    <span class="detail__field-name">@Html.CustomFieldResource(property.Field.Name)</span>
                                    <span class="detail__field-value">
                                        @switch (property.Field.Type)
                                        {
                                            case CustomFieldType.Boolean:
                                                @(bool.Parse(property.Value) ? Html.GlobalResource("Yes") : Html.GlobalResource("No"));
                                                break;
                                            case CustomFieldType.Decimal:
                                                @(decimal.Parse(property.Value).ToString(Formats.Decimal, Html.GetCurrentCultureInfo()));
                                                break;
                                            case CustomFieldType.Int:
                                                @(int.Parse(property.Value).ToString(Html.GetCurrentCultureInfo()));
                                                break;
                                            case CustomFieldType.DateTime:
                                                @(DateTime.Parse(property.Value).ToString("D", Html.GetCurrentCultureInfo()));
                                                break;
                                            case CustomFieldType.Enum:
                                                @Html.CustomFieldResource(property.Value);
                                                break;
                                            default:
                                                @property.Value;
                                                break;
                                        }
                                    </span>
                                    @{MvcHtmlString helpText = Html.CustomFieldResourceOrDefault(string.Concat(property.Field.Name, "_Help"));}
                                    @if (helpText != null)
                                    {
                                        <span class="default__field-help">
                                            @Html.ToolTipButton(property.Field.Name + "_Help")
                                        </span>
                                    }
                                    @if (helpText != null)
                                    {
                                        <div>
                                            @Html.ToolTipContent(property.Field.Name + "_Help", helpText)
                                        </div>
                                    }
                                </li>
                                        }

                        </ul>
                        <hr />
                    </div>
                                        }
                <div class="col-xs-12">
                    @Html.Partial("ListingDetail_GeneralData", Model.Listing)
                </div>
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-md-7">
        <div class="panel panel-default detail__description-panel">
            <div class="panel-heading">
                @Html.GlobalResource("Description")
            </div>
            <div class="panel-body description">
                @MvcHtmlString.Create(Model.Listing.Description) @*note: this string is expected to have safe html code*@
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-12">
        @Html.Partial("PublicQandA", Model.Listing)
    </div>
</div>

@if (nonImageMedia.Count() > 0)
{
    foreach (Media media in nonImageMedia.Where(m => m.Type.Contains("YouTube")))
    {

        @Html.Partial(media.Type + "_" + media.DefaultVariationName, media)
    }
}